[
    {
        "title": "Вступ до JSX",
        "body": "React використовує той факт, що логіка виводу пов’язана з іншою логікою інтерфейсу користувача: як обробляються події, як змінюється стан з часом і як дані готуються для рендерингу.",
        "href": "https://uk.legacy.reactjs.org/docs/introducing-jsx.html"
    },
    {
        "title": "Стан та життєвий цикл",
        "body": "Метод render буде викликатися кожного разу, коли відбуватиметься оновлення. Але до тих пір, поки ми рендеремо <Clock /> в тому ж DOM-вузлі, буде використано лише один екземпляр класу Clock. Це дозволяє нам використовувати додаткові функції, такі як методи внутрішнього стану та життєвого циклу.",
        "href": "https://uk.legacy.reactjs.org/docs/state-and-lifecycle.html"
    },
    {
        "title": "React без JSX",
        "body": "JSX не є вимогою для роботи з React. Використання React без JSX є найзручнішим тоді, коли ви не бажаєте налаштовувати компіляцію у вашому середовищі збірки.Кожен JSX-елемент являє собою “синтаксичний цукор” для виклику React.createElement(component, props, ...children). Отже, все що можна зробити за допомогою JSX, може також бути виконаним на чистому JavaScript.",
        "href": "https://uk.legacy.reactjs.org/docs/react-without-jsx.html"
    },
    {
        "title": "Ознайомлення з Хуками",
        "body": "Хуки — це новинка в React 16.8. Вони дозволяють вам використовувати стан та інші можливості React без написання класу.Нова функція useState є першим “хуком”.",
        "href": "https://uk.legacy.reactjs.org/docs/hooks-intro.html"
    },
    {
        "title": "Елементи DOM",
        "body": "У React усі властивості й атрибути DOM (включно з обробниками подій) мають використовувати camelCase нотацію. Наприклад, атрибут HTML tabindex відповідає атрибуту tabIndex у React. Виключенням є лише aria-* та data-* атрибути, які будуть у нижньому регістрі. Наприклад, ви можете залишити aria-label як aria-label.",
        "href": "https://uk.legacy.reactjs.org/docs/dom-elements.html"
    },
    {
        "title": "Веб-компоненти",
        "body": "React та веб-компоненти створені для вирішення різних проблем. Веб-компоненти забезпечують надійну інкапсуляцію для повторно використовуваних компонентів, в той час як React надає декларативну бібліотеку для синхронізації даних з DOM. Дві цілі доповнюють одна одну. Більшість React-розробників не використовують веб-компоненти.",
        "href": "https://uk.legacy.reactjs.org/docs/web-components.html"
    }
]